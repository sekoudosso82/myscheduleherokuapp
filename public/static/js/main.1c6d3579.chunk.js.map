{"version":3,"sources":["mainStore.js","todos/NewTodoForm.js","todos/actions.js","todos/TodoListItem.js","todos/TodoList.js","todos/CompleteTodoListItem.js","todos/TodoListComplete.js","NavBar.js","App.js","index.js"],"names":["initialState","dateToDo","title","activeToDOList","fetchToDoLists","dispatch","fetch","then","resp","json","type","payload","todos","prevState","action","console","log","id","map","todoList","filter","NewTodoForm","state","user_id","status","handleChange","event","setState","target","name","value","handleAddNewTask","data","method","headers","body","JSON","stringify","errors","alert","props","createNewTodo","className","onSubmit","this","placeholder","onChange","Component","connect","text","TodoListItem","handleDelete","deleteTodo","markAsCompleted","preventDefault","completedTask","targetItem","onClick","TodoList","fetchTodos","todo","CompleteTodoListItem","TodoListComplete","NavBar","to","App","fetchAllTodos","fixed","logout","path","component","todolist","store","createStore","mainStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"qWACMA,EAAe,CACjBC,SAAU,GACVC,MAAO,GACPC,eAAgB,IAEPC,EAAiB,kBAAM,SAAAC,GAChCC,MAAM,sCACLC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAJ,GACFE,EAAS,CAACK,KAAM,oBAAqBC,QAAS,CAAER,yBA+BzCS,MA5Bf,WAAoD,IAApCC,EAAmC,uDAAvBb,EAAcc,EAAS,uCAE/C,OAAQA,EAAOJ,MACf,IAAK,oBACD,OAAO,2BAAIG,GAAX,IAAsBV,eAAgBW,EAAOH,QAAQR,iBAEzD,IAAK,cAED,OADAY,QAAQC,IAAI,wCAAyCF,EAAOH,SACrD,2BAAIE,GAAX,IAAsBV,eAAe,GAAD,mBAAMU,EAAUV,gBAAhB,CAAgCW,EAAOH,YAE/E,IAAK,gBAED,OADAI,QAAQC,IAAI,0CAA2CF,EAAOH,QAAQM,IAC/D,2BAAIJ,GAAX,IACIV,eAAgBU,EAAUV,eAAee,KAAI,SAAAC,GACzC,OAAIA,EAASF,KAAKH,EAAOH,QAAQM,GACtBH,EAAOH,QACHQ,OAG3B,IAAK,cAED,OADAJ,QAAQC,IAAI,sCAAuCF,EAAOH,QAAQM,IAC3D,2BAAIJ,GAAX,IAAsBV,eAAe,YAAKU,EAAUV,eAAeiB,QAAO,SAAAD,GAAQ,OAAIA,EAASF,KAAOH,EAAOH,QAAQM,SAEzH,QACI,OAAOJ,I,QChCTQ,G,kNACFC,MAAQ,CACJC,QAAU,EACVrB,MAAO,GACPsB,QAAQ,EACRvB,SAAU,I,EAIdwB,aAAe,SAACC,GACZ,EAAKC,SAAL,eACKD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,S,EAI1CC,iBAAmB,WAEf,IAAIC,EAAO,CACPT,QAAU,EACVrB,MAAO,EAAKoB,MAAMpB,MAClBsB,QAAQ,EACRvB,SAAU,EAAKqB,MAAMrB,UAGzBc,QAAQC,IAAI,cAAegB,GAC3B1B,MAAM,qCAAsC,CACxC2B,OAAQ,OACRC,QAAS,CAAC,eAAgB,mBAChB,OAAU,oBACpBC,KAAMC,KAAKC,UAAUL,KAExBzB,MAAK,SAAAC,GAAI,OAAEA,EAAKC,UAChBF,MAAK,SAAAyB,GACCA,EAAKM,OACJC,MAAMP,EAAKM,QAEXC,MAAM,mCACN,EAAKC,MAAMC,cAAcT,O,uDAKjC,OACI,6BACI,0BAAMU,UAAU,gBAAgBC,SAAUC,KAAKb,kBAC3C,2BACIW,UAAU,iBACVhC,KAAK,OACLmB,KAAK,QACLgB,YAAY,0BACZf,MAAOc,KAAKtB,MAAMpB,MAClB4C,SAAUF,KAAKnB,eACnB,2BACIiB,UAAU,sBACVhC,KAAK,OACLmB,KAAK,WACLC,MAAOc,KAAKtB,MAAMrB,SAClB6C,SAAUF,KAAKnB,eACnB,4BAAQiB,UAAU,kBAAkBhC,KAAK,SAASoB,MAAM,UAAxD,qB,GA1DMiB,cAwEXC,cAAQ,MAJX,SAAA3C,GAAQ,MAAK,CACrBoC,cAAe,SAACT,GAAD,OAAU3B,ECzEM,CAC/BK,KAFuB,cAGvBC,QAAS,CAAEsC,KDuEkCjB,SAGlCgB,CAAmB3B,GEzE5B6B,G,kNACFC,aAAe,WAEX,IAAIlC,EAAM,EAAKuB,MAAMvB,GACrBX,MAAM,sCAAD,OAAuCW,GAAM,CAC9CgB,OAAQ,WAEX1B,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAyB,GACFjB,QAAQC,IAAI,iBAAkBgB,EAAKf,IACnC,EAAKuB,MAAMY,WAAWpB,O,EAG9BqB,gBAAkB,SAAC3B,GACfA,EAAM4B,iBACN,IAAIrC,EAAM,EAAKuB,MAAMvB,GACrBX,MAAM,sCAAD,OAAuCW,GAAM,CAC9CgB,OAAQ,QACRC,QAAS,CAAC,eAAgB,mBAChB,OAAU,oBACpBC,KAAMC,KAAKC,UAAU,CAACb,QAAQ,MAGjCjB,MAAK,SAAAC,GAAI,OAAEA,EAAKC,UAChBF,MAAK,SAAAyB,GAAU,EAAKQ,MAAMe,cAAcvB,MACzC,EAAKL,SAAS,CAAE6B,WAAY,M,EAGhC/B,aAAe,SAACC,GACZ,EAAKC,SAAL,eACOD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,S,uDAOxC,OACI,yBAAKY,UAAU,uBACX,4BAAKE,KAAKJ,MAAMtC,OAChB,4BAAK0C,KAAKJ,MAAMvC,UAChB,yBAAKyC,UAAU,qBACX,4BAAQA,UAAU,mBAAmBe,QAAUb,KAAKS,iBAApD,qBAEA,4BAAQX,UAAU,gBAAgBe,QAASb,KAAKO,cAAhD,gB,GA5COJ,cAwDZC,cAAQ,MALX,SAAA3C,GAAQ,MAAK,CACrB+C,WAAY,SAACpB,GAAD,OAAU3B,EAAS,CAACK,KAAM,cAAeC,QAASqB,KAC9DuB,cAAe,SAACvB,GAAD,OAAU3B,EAAS,CAACK,KAAM,gBAAiBC,QAASqB,QAGxDgB,CAAmBE,GCrD5BQ,G,wLAGEd,KAAKJ,MAAMmB,e,+BAIX,OADA5C,QAAQC,IAAI,mCAAmC4B,KAAKJ,MAAMrC,gBAEtD,yBAAKuC,UAAU,gBACX,kBAAC,EAAD,MACCE,KAAKJ,MAAMrC,eAAeiB,QAAO,SAAAD,GAAQ,OAAwB,IAApBA,EAASK,UACtDN,KAAI,SAAA0C,GAAI,OAAI,kBAAC,EAAiBA,W,GAXxBb,cA2BRC,eAVH,SAAA1B,GAAK,MAAK,CAClBnB,eAAgBmB,EAAMnB,mBAGd,SAAAE,GACR,MAAO,CACHsD,WAAY,kBAAMtD,EAASD,SAIpB4C,CAAkBU,GChBlBG,E,uKAZP,OACI,yBAAKnB,UAAU,gCACX,6DACA,sCAAYE,KAAKJ,MAAMtC,OACvB,8CAAoB0C,KAAKJ,MAAMvC,e,GAPZ8C,aCG7Be,E,kLAGElB,KAAKJ,MAAMmB,e,+BAGX,OACI,yBAAKjB,UAAU,gBAEVE,KAAKJ,MAAMrC,eAAeiB,QAAO,SAAAD,GAAQ,OAAwB,IAApBA,EAASK,UACtDN,KAAI,SAAA0C,GAAI,OAAI,kBAAC,EAAyBA,W,GAVxBb,aA0BhBC,eAVH,SAAA1B,GAAK,MAAK,CAClBnB,eAAgBmB,EAAMnB,mBAGd,SAAAE,GACR,MAAO,CACHsD,WAAY,kBAAMtD,EAASD,SAIpB4C,CAAkBc,G,MCAlBC,MAzBf,SAAgBvB,GAId,OACC,yBAAKE,UAAU,sBAIN,kBAAC,IAAD,CAAMsB,GAAG,KACL,yBAAKtB,UAAU,aAAf,SAGJ,kBAAC,IAAD,CAAMsB,GAAG,aACL,yBAAKtB,UAAU,aAAf,qBCXVuB,E,kLAEErB,KAAKJ,MAAM0B,kB,+BAKX,OACI,yBAAKxB,UAAU,OACX,kBAAC,EAAD,CAAQyB,MAAM,MAAOC,OAAQxB,KAAKwB,SAClC,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,YAAYC,UAAWZ,IACnC,kBAAC,IAAD,CAAOW,KAAK,YAAYC,UAAWR,IACnC,kBAAC,IAAD,CAAOO,KAAK,IAAIC,UAAWZ,U,GAb7BX,aA4BlB,IAMeC,eAbf,SAAa1B,GACT,MAAO,CACLiD,SAAUjD,EAAMnB,mBAKV,SAAAE,GACR,MAAO,CACH6D,cAAe,kBAAM7D,EAASD,SAIvB4C,CAAkBiB,G,gBCjC7BO,EAAQC,YAAaC,EAAWC,YAAgBC,MAEpDC,IAASC,OACL,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOH,KAAK,IAAIC,UAAWL,MAGnCc,SAASC,eAAe,W","file":"static/js/main.1c6d3579.chunk.js","sourcesContent":["\nconst initialState = {\n    dateToDo: '',\n    title: '',\n    activeToDOList: []\n}\nexport const fetchToDoLists = () => dispatch => {\n    fetch('http://localhost:3001/api/v1/tasks')\n    .then(resp => resp.json())\n    .then(activeToDOList => {\n        dispatch({type: 'FETCH_TO_DO_LISTS', payload: { activeToDOList }})\n    })\n} \nfunction todos (prevState = initialState, action)  {\n\n    switch (action.type) {\n    case 'FETCH_TO_DO_LISTS':\n        return {...prevState, activeToDOList: action.payload.activeToDOList}\n    \n    case 'CREATE_TODO': \n        console.log('*****  payload create new todo  *****', action.payload)\n        return {...prevState, activeToDOList: [...prevState.activeToDOList, action.payload]};\n    \n    case 'COMPLETE_TODO': {\n        console.log('***** id  payload completed todo  *****', action.payload.id)\n        return {...prevState, \n            activeToDOList: prevState.activeToDOList.map(todoList=>{\n                if (todoList.id===action.payload.id){\n                    return action.payload\n                }else { return todoList }\n            })};\n    }\n    case 'REMOVE_TODO': \n        console.log('***** id payload delete todo  *****', action.payload.id)\n        return {...prevState, activeToDOList: [...prevState.activeToDOList.filter(todoList => todoList.id !== action.payload.id)]};\n    \n    default:\n        return prevState;\n    }\n}\n\nexport default todos\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { createTodo } from './actions';\nimport './NewTodoForm.css';\n\nclass NewTodoForm extends Component {\n    state = {\n        user_id : 1,\n        title: '',\n        status: false,\n        dateToDo: '',\n    };\n    \n     \n    handleChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    };\n\n    handleAddNewTask = () => {\n         \n        let data = {\n            user_id : 1,\n            title: this.state.title,\n            status: false,\n            dateToDo: this.state.dateToDo,\n          } \n \n        console.log('** new task', data)\n        fetch(\"http://localhost:3001/api/v1/tasks\", {\n            method: 'Post',\n            headers: {\"Content-Type\": \"application/json\",\n                      \"Accept\": \"application/json\"},    \n            body: JSON.stringify(data)\n        })\n        .then(resp=>resp.json())\n        .then(data => {\n            if(data.errors){\n                alert(data.errors)} \n            else {\n                alert('Successfully added to watchlist')}\n                this.props.createNewTodo(data)\n        }) \n    }\n\n    render(){\n        return (\n            <div >\n                <form className=\"new-todo-form\" onSubmit={this.handleAddNewTask} >\n                    <input\n                        className=\"new-todo-input\"\n                        type=\"text\"\n                        name='title'\n                        placeholder=\"Type your new todo here\"\n                        value={this.state.title}\n                        onChange={this.handleChange} />\n                    <input\n                        className=\"new-todo-date-input\"\n                        type=\"date\"\n                        name='dateToDo'\n                        value={this.state.dateToDo}\n                        onChange={this.handleChange}/>\n                    <button className=\"new-todo-button\" type='Submit' value=\"Submit\" >\n                        Create Todo\n                    </button>\n                    \n                </form>\n            </div>\n    );\n}\n};\n\nconst mdp = dispatch => ({\n    createNewTodo: (data) => dispatch(createTodo(data)),\n});\n\nexport default connect(null, mdp)(NewTodoForm);\n\n","export const CREATE_TODO = 'CREATE_TODO';\nexport const createTodo = text => ({\n    type: CREATE_TODO,\n    payload: { text },\n});\n\nexport const COMPLETE_TODO = 'COMPLETE_TODO';\nexport const completeTodo = text => ({\n    type: COMPLETE_TODO,\n    payload: { text },\n});\n\nexport const REMOVE_TODO = 'REMOVE_TODO';\nexport const removeTodo = text => ({\n    type: REMOVE_TODO,\n    payload: { text },\n});","import React, {Component} from 'react';\nimport './TodoListItem.css';\nimport { connect } from 'react-redux';\n\nclass TodoListItem extends Component {\n    handleDelete = () => {\n        // console.log('************this.props.id **********', this.props.id)\n        let id  = this.props.id;              \n        fetch(`http://localhost:3000/api/v1/tasks/${id}`, {\n            method: \"DELETE\"\n        })\n        .then(resp => resp.json())\n        .then(data => { \n            console.log('delete data id', data.id)\n            this.props.deleteTodo(data)})\n    }\n\n    markAsCompleted = (event) => {\n        event.preventDefault()\n        let id  = this.props.id;              \n        fetch(`http://localhost:3000/api/v1/tasks/${id}`, {\n            method: 'PATCH',\n            headers: {\"Content-Type\": \"application/json\",\n                      \"Accept\": \"application/json\"},    \n            body: JSON.stringify({status: true}\n            )\n        })\n        .then(resp=>resp.json())\n        .then(data =>  {this.props.completedTask(data)})\n        this.setState({ targetItem: {} }) \n    } \n    \n    handleChange = (event) => {\n        this.setState({\n              [event.target.name]: event.target.value\n        })\n      }\n    render(){\n        // console.log('************this.props.title**********', this.props.title)\n        // console.log('************this.props.date**********', this.props.dateToDo)\n        // console.log('************this.props.id **********', this.props.id)\n        return(\n            <div className=\"todo-item-container\">\n                <h3>{this.props.title}</h3>\n                <h3>{this.props.dateToDo}</h3>\n                <div className=\"buttons-container\">\n                    <button className=\"completed-button\" onClick= {this.markAsCompleted} >\n                        Mark As Completed</button>\n                    <button className=\"remove-button\" onClick={this.handleDelete}>\n                        Remove</button>\n                </div>\n            </div>\n        )\n    }\n};\nconst mdp = dispatch => ({\n    deleteTodo: (data) => dispatch({type: \"REMOVE_TODO\", payload:(data)}),\n    completedTask: (data) => dispatch({type: \"COMPLETE_TODO\", payload:(data)}),\n});\n\nexport default connect(null, mdp)(TodoListItem);\n","import React,{Component} from 'react';\nimport { connect } from 'react-redux';\nimport { fetchToDoLists } from '../mainStore'\nimport NewTodoForm from './NewTodoForm';\nimport TodoListItem from './TodoListItem';\nimport './TodoList.css';\n\nclass TodoList extends Component{\n    \n    componentDidMount(){\n        this.props.fetchTodos()\n      } \n    render(){\n        console.log('****************todolist********',this.props.activeToDOList)\n        return(\n            <div className=\"list-wrapper\">\n                <NewTodoForm />\n                {this.props.activeToDOList.filter(todoList => todoList.status === false)\n                .map(todo => <TodoListItem {...todo} />)}\n            </div>\n        )\n    }\n};\n\nconst msp = state => ({\n    activeToDOList: state.activeToDOList,\n});\n\nconst mdp = dispatch => {\n    return {\n        fetchTodos: () => dispatch(fetchToDoLists()),\n    }\n}\n  \nexport default connect(msp, mdp)(TodoList);","import React, {Component} from 'react';\nimport './TodoListItem.css';\n\nclass CompleteTodoListItem extends Component {\n    \n    render(){\n        return(\n            <div className=\"complete-todo-item-container\">\n                <h3> THIS TASK HAS BEEN COMPLETED</h3>\n                <h3>TITLE: {this.props.title}</h3>\n                <h3>COMPLETE DATE: {this.props.dateToDo}</h3>\n                \n            </div>\n        )\n    }\n};\n\n\nexport default CompleteTodoListItem;\n\n","import React,{Component} from 'react';\nimport { connect } from 'react-redux';\nimport { fetchToDoLists } from '../mainStore'\nimport  CompleteTodoListItem from './CompleteTodoListItem';\nimport './TodoList.css';\n\nclass TodoListComplete extends Component{\n    \n    componentDidMount(){\n        this.props.fetchTodos()\n      } \n    render(){\n        return(\n            <div className=\"list-wrapper\">\n                \n                {this.props.activeToDOList.filter(todoList => todoList.status === true)\n                .map(todo => <CompleteTodoListItem {...todo} />)}\n            </div>\n        )\n    }\n};\n\nconst msp = state => ({\n    activeToDOList: state.activeToDOList,\n});\n\nconst mdp = dispatch => {\n    return {\n        fetchTodos: () => dispatch(fetchToDoLists()),\n    }\n}\n  \nexport default connect(msp, mdp)(TodoListComplete);","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './App.css';\nimport TodoListComplete from './todos/TodoListComplete'; \nimport {connect} from 'react-redux'\n\n\nfunction NavBar(props){\n    // console.log('nav bar prop shoppingCartItems length', props.shoppingCartItems.length)\n    // console.log('nav bar prop current user', props.currentUser)\n  \n  return (\n   <div className=\"  fixed-top navbar\" >\n   \n          {/* <div className=\"navDiv\">  */}\n          \n            <Link to=\"/\">\n                <div className=\"navCLass \" >Home</div>\n            </Link>\n          \n            <Link to=\"/complete\">\n                <div className=\"navCLass \" >Complete Tasks</div>\n            </Link>\n          \n \n      </div>\n      \n  )\n}\n\n\n\nexport default NavBar\n","import React, {Component} from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'; \nimport TodoList from './todos/TodoList';\nimport TodoListComplete from './todos/TodoListComplete'\nimport { connect } from 'react-redux';\nimport { fetchToDoLists } from './mainStore'\nimport NavBar from './NavBar'\n\nimport './App.css';\n\nclass App extends Component {\n    componentDidMount(){\n        this.props.fetchAllTodos()  \n    }\n    render(){\n        // console.log('****************app activeToDOList********',this.props.todolist)\n\n        return(\n            <div className=\"App\">\n                <NavBar fixed=\"top\"  logout={this.logout} />\n                <Switch>\n                    <Route path='/todolist' component={TodoList} /> \n                    <Route path='/complete' component={TodoListComplete} />\n                    <Route path='/' component={TodoList} /> \n                </Switch>\n            </div>\n\n        )\n    }\n};\n\nfunction msp(state){\n    return {\n      todolist: state.activeToDOList,\n      \n    }\n  }\n\nconst mdp = dispatch => {\n    return {\n        fetchAllTodos: () => dispatch(fetchToDoLists()), \n    }\n  }\n\nexport default connect(msp, mdp)(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\n\nimport { createStore, applyMiddleware } from 'redux' ;\nimport { Provider } from 'react-redux';\nimport mainStore from './mainStore';\nimport thunk from 'redux-thunk';\n\nlet store = createStore (mainStore, applyMiddleware(thunk))\n\nReactDOM.render(\n    <Provider store={store} >\n        <Router>\n            <Route path='/' component={App} />\n        </Router>\n    </Provider>,\n    document.getElementById('root'),\n);"],"sourceRoot":""}